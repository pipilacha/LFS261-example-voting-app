void setBuildStatus(String message, String state) {
  step([
      $class: "GitHubCommitStatusSetter",
      //reposSource: [$class: "ManuallyEnteredRepositorySource", url: "https://github.com/my-org/my-repo"],
      contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "ci/jenkins/build-status"],
      errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
      statusResultSource: [ $class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
  ]);
}

pipeline{
    agent any

    tools{
        nodejs 'node 19.0.1'
    }

    stages {
        stage('build') {
            when { changeset "**/result/**" }
            steps {
                echo 'Building node app'
                dir('result'){
                    sh 'npm install'
                    sh 'npm ls'
                }
            }
        }
        stage('test') {
            when { changeset "**/result/**" }
            steps {
                echo 'Running unit tests on result app'
                dir('result'){
                    sh 'npm install'
                    sh 'npm test'
                }
            }
        }
    }
    post{
        always{            
            echo 'Result multibranch pipeline completed'
        }
        failure{
            setBuildStatus("Build complete", "FAILED");
            slackSend (message: "Build failed: ${env.JOB_NAME} ${BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
        }
        success{
            setBuildStatus("Build complete", "SUCCESS");
            slackSend (message: "Build sucess: ${env.JOB_NAME} ${BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
        }
    }
}
