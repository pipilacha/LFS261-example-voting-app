pipeline{
    agent{
        docker{
            image 'maven:3.6.1-jdk-8-slim'
            args '-v $HOME/.m2:/root/.m2'
        }
    }

    // tools{
    //     maven 'maven 3.6.1'
    // }

    stages {
        stage('build') {
            when { changeset "**/worker/**" }
            steps {
                echo 'Compiling worker app'
                dir('worker'){
                    sh 'mvn compile'
                }
            }
        }
        stage('test') {
            when { changeset "**/worker/**" }
            steps {
                echo 'Running unit tests on worker app'
                dir('worker'){
                    sh 'mvn clean test'
                }
            }
        }
        stage('package') {   
            when { 
                changeset "**/worker/**"
                branch 'master'
            }
            steps {
                echo 'Packaging worker app'
                dir('worker'){
                    sh 'mvn package -DskipTests'
                }
                archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
            }
        }
        stage('docker-package') {
            agent any
            steps {
                echo 'Packaging worker app with docker'
                script {
                    docker.withRegistry('https://index.docker.io/v1/','dockerlogin') {
                        def workerImage = docker.build ("${env.GIT_URL.tokenize('/.')[-2]}/worker:v${env.BUILD_ID}", './ worker')
                        workerImage.push()
                        workerImage.push('latest')
                    }
                }
            }
        }
    }
    post{
        always{            
            echo 'Worker multibranch pipeline completed'
        }
        failure{
            slackSend (message: "Build failed: ${env.JOB_NAME} ${BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
        }
        success{
            slackSend (message: "Build sucess: ${env.JOB_NAME} ${BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
        }
    }
}
