pipeline {
    agent none
    stages{
        stage('building flask'){
            when {
                changeset '**/vote/**'
            }
            agent {
                docker {
                    image 'python:2.7-alpine'
                    args '-u root --privileged'
                }
            }
            steps{
                echo 'Building vote app'
                dir('vote'){
                    sh ''' \n pip install -r requirements \n flask --app app run'''
                }
            }
        }
        stage('running unit tests'){
            when {
                changeset '**/vote/**'
            }
            agent {
                docker {
                    image 'python:2.7-alpine'
                    args '-u root --privileged'
                }
            }
            steps{
                echo 'Building vote app'
                dir('vote'){
                    sh 'pip install -r requirements.txt'
                    sh 'nosetests tests/'
                }
            }
        }
        stage('docker-package') {
            steps {
                echo 'Packaging vote app with docker'
                script {
                    docker.withRegistry('https://index.docker.io/v1/','dockerlogin') {
                        def workerImage = docker.build ("${env.GIT_URL.tokenize('/.')[-3]}/vote:v${env.BUILD_ID}", './vote')
                        workerImage.push()
                        workerImage.push('latest')
                    }
                }
            }
        }
    }
    post{
        always{            
            echo 'Result multibranch pipeline completed'
        }
        failure{
            slackSend (message: "Build failed: ${env.JOB_NAME} ${BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
        }
        success{
            slackSend (message: "Build sucess: ${env.JOB_NAME} ${BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
        }
    }
}